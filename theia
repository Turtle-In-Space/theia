#!/usr/bin/env bash
# This script was generated by bashly 1.2.13 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
theia_usage() {
  if [[ -n $long_usage ]]; then
    base64 -d <<<"H4sIADUnYWgA/4VN0Q2FQAj7Zwo2cCBz6QguwPDXFp4x0eQ1lUKpXMJIqkjM5MESJTuzqM2Dm2W31FNeGdonL7hnuZyBRiijlX/BujO+83tiKPt5R+1XZtZTOoN+DiI/okVVZOYvIjbgqoaBIQEAAA==" | gunzip

  else
    printf "theia - Automatic discovery of a given IP address\n\n"
  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  theia COMMAND\n"
  printf "  theia [COMMAND] --help | -h\n"
  printf "  theia --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Perform inital scan and create .env file\n" "$(green "init")       "
  printf "  %s   Create .env file\n" "$(green "set")        "
  printf "  %s   Generate bash completions\n" "$(green "completions")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
theia_init_usage() {
  printf "theia init - Perform inital scan and create .env file\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  theia init IPADDR [OPTIONS]\n"
  printf "  theia init --help\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--name, -n NAME (required)")"
    printf "    Name of target\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--hostname, -h HOSTNAME")"
    printf "    Hostname of target\n"
    printf "    %s\n" "Needs: --extension"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--extension, -e EXTENSION")"
    printf "    URL extension of target\n"
    printf "    %s\n" "Needs: --hostname"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "IPADDR")"
    printf "    IP address of target\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  theia init 127.0.0.1 --name anthem --hostname anthemvm --extension thm\n"
    printf "  theia init 10.13.202.203 -n lazarus\n"
    echo

  fi
}

# :command.usage
theia_set_usage() {
  printf "theia set - Create .env file\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  theia set IPADDR [OPTIONS]\n"
  printf "  theia set --help\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--name, -n NAME (required)")"
    printf "    Name of target\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--hostname, -h HOSTNAME")"
    printf "    Hostname of target\n"
    printf "    %s\n" "Needs: --extension"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--extension, -e EXTENSION")"
    printf "    URL extension of target\n"
    printf "    %s\n" "Needs: --hostname"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "IPADDR")"
    printf "    IP address of target\n"
    echo

  fi
}

# :command.usage
theia_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "theia completions\n\n"
    printf "  Generate bash completions\n  Usage: eval \"\$(cli completions)\"\n\n"
  else
    printf "theia completions - Generate bash completions\n\n"
  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  theia completions\n"
  printf "  theia completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh

enable_auto_colors() {
  if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
    NO_COLOR=1
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ "${NO_COLOR:-}" == "" ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# src/lib/help_functions.sh
print_ok() {
  echo "$(green [+])" "$1"
}

print_info() {
  echo "$(blue [*])" "$1"
}

print_warn() {
  echo "$(orange [-])" "$1"
}

print_err() {
  echo "$(red [!])" "$1"
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# theia completion                                         -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_theia_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_theia_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_theia_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'init\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_theia_completions_filter "--extension --help --hostname --name -e -h -n")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'set\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_theia_completions_filter "--extension --help --hostname --name -e -h -n")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_theia_completions_filter "--help --version -h -v completions init set")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _theia_completions theia'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
theia_init_command() {

  # src/commands/init.sh
  has_match() {
    local pattern="$1"
    local file="$2"

    if  rg -q "$pattern" "$file" ; then
      return 0
    else
      return 1
    fi
  }

  # service name | command
  run_script() {
    if has_match "$1" $port_scan ; then
      print_info "starting $1 scan..."
      $3
    else
      print_warn "did not find port for: $1 scan"
    fi
  }

  # create vars
  name=${args[--name]}
  env_file=$name.env
  port_scan=export/port-scan.xml

  # Create dir
  print_info "creating $name/..."
  mkdir -p "$name"/export
  cd "$name"

  # Create .env
  print_info 'creating .env file'
  theia_set_command
  source "$env_file"

  # scan target
  print_info 'starting nmap scan...'
  nmap -sC -sV -T4 -p- "$ip" -oX "$port_scan" -oN port-scan.nmap

  # script commands
  http_scan_command="ffuf -u $url/FUZZ -w /usr/share/seclists/Discovery/Web-Content/big.txt -recursion -recursion-depth 1 -t 100 -of md -o web-dir.md"
  smb_scan_command="enum4linux-ng -As $ip -oJ smb-enum"

  # run enum scripts
  run_script 'http' "$http_scan_command"
  run_script 'netbios-ssn' "$smb_scan_command"

  print_ok 'all scans complete.'

  if [ -z $host ] ; then
    echo ''
    print_info 'add the following to /etc/hosts'
    echo "$ip" "$host.$ext"
  fi

}

# :command.function
theia_set_command() {

  # src/commands/set.sh
  ip=${args[ipaddr]}
  name=${args[--name]}
  host=${args[--hostname]}
  ext=${args[--extension]}
  env_file="$name.env"

  echo '# Created by Theia' >> $env_file

  echo "ip=$ip" >> "$env_file"
  if [ -z $host ] ; then
    url="http://$ip"
  else
    url="http://$host.$ext"
    echo "host=$host" >> "$env_file"
  fi

  echo "url=$url" >> "$env_file"

  print_ok "Created $env_file"

}

# :command.function
theia_completions_command() {

  # src/commands/completions.sh
  echo "# This file is located at 'src/completions_command.sh'."
  echo "# It contains the implementation for the 'theia completions' command."
  echo "# The code you write here will be wrapped by a function named 'theia_completions_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        theia_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v gunzip >/dev/null 2>&1; then
    printf "missing dependency: gunzip\n" >&2
    missing_deps=1
  else
    deps['gunzip']="$(command -v gunzip | head -n1)"
  fi

  # :dependency.filter
  if ! command -v base64 >/dev/null 2>&1; then
    printf "missing dependency: base64\n" >&2
    missing_deps=1
  else
    deps['base64']="$(command -v base64 | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      theia_init_parse_requirements "$@"
      shift $#
      ;;

    set)
      action="set"
      shift
      theia_set_parse_requirements "$@"
      shift $#
      ;;

    completions)
      action="completions"
      shift
      theia_completions_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      theia_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
theia_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help)
        long_usage=yes
        theia_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v nmap >/dev/null 2>&1; then
    printf "missing dependency: nmap\n" >&2
    missing_deps=1
  else
    deps['nmap']="$(command -v nmap | head -n1)"
  fi

  # :dependency.filter
  if ! command -v ffuf >/dev/null 2>&1; then
    printf "missing dependency: ffuf\n" >&2
    missing_deps=1
  else
    deps['ffuf']="$(command -v ffuf | head -n1)"
  fi

  # :dependency.filter
  if ! command -v enum4linux-ng >/dev/null 2>&1; then
    printf "missing dependency: enum4linux-ng\n" >&2
    missing_deps=1
  else
    deps['enum4linux-ng']="$(command -v enum4linux-ng | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --name | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--name']="$2"
          shift
          shift
        else
          printf "%s\n" "--name requires an argument: --name, -n NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --hostname | -h)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--hostname']="$2"
          shift
          shift
        else
          printf "%s\n" "--hostname requires an argument: --hostname, -h HOSTNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --extension | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--extension']="$2"
          shift
          shift
        else
          printf "%s\n" "--extension requires an argument: --extension, -e EXTENSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['ipaddr']+x} ]]; then
          args['ipaddr']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['ipaddr']+x} ]]; then
    printf "missing required argument: IPADDR\nusage: theia init IPADDR [OPTIONS]\n" >&2
    # :command.examples_on_error
    printf "examples:\n" >&2
    printf "  theia init 127.0.0.1 --name anthem --hostname anthemvm --extension thm\n" >&2
    printf "  theia init 10.13.202.203 -n lazarus\n" >&2

    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--name']+x} ]]; then
    printf "missing required flag: --name, -n NAME\n" >&2
    exit 1
  fi

  # :command.needy_flags_filter
  # :flag.needs
  if [[ -n ${args['--hostname']+x} ]] && [[ -z "${args[--extension]:-}" ]]; then
    printf "%s\n" "--hostname needs --extension" >&2
    exit 1
  fi

  # :flag.needs
  if [[ -n ${args['--extension']+x} ]] && [[ -z "${args[--hostname]:-}" ]]; then
    printf "%s\n" "--extension needs --hostname" >&2
    exit 1
  fi

}

# :command.parse_requirements
theia_set_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help)
        long_usage=yes
        theia_set_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --name | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--name']="$2"
          shift
          shift
        else
          printf "%s\n" "--name requires an argument: --name, -n NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --hostname | -h)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--hostname']="$2"
          shift
          shift
        else
          printf "%s\n" "--hostname requires an argument: --hostname, -h HOSTNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --extension | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--extension']="$2"
          shift
          shift
        else
          printf "%s\n" "--extension requires an argument: --extension, -e EXTENSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['ipaddr']+x} ]]; then
          args['ipaddr']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['ipaddr']+x} ]]; then
    printf "missing required argument: IPADDR\nusage: theia set IPADDR [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--name']+x} ]]; then
    printf "missing required flag: --name, -n NAME\n" >&2
    exit 1
  fi

  # :command.needy_flags_filter
  # :flag.needs
  if [[ -n ${args['--hostname']+x} ]] && [[ -z "${args[--extension]:-}" ]]; then
    printf "%s\n" "--hostname needs --extension" >&2
    exit 1
  fi

  # :flag.needs
  if [[ -n ${args['--extension']+x} ]] && [[ -z "${args[--hostname]:-}" ]]; then
    printf "%s\n" "--extension needs --hostname" >&2
    exit 1
  fi

}

# :command.parse_requirements
theia_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        theia_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") theia_init_command ;;
    "set") theia_set_command ;;
    "completions") theia_completions_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
